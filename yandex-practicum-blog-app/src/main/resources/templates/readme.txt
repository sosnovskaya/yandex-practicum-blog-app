1. Положить папку templates в src/main/resources Spring проекта
2. Описание шаблонов:
	а) posts.html - главная страница ленты постов, на которой представлены все посты (входная точка приложения)
	б) post.html - страница с постом и комментариями к нему
	в) post-add.html - страница с формой для добавления/редактирования поста
3. В шаблонах присутствует только html-верстка (JavaScript используется только в <select> и немного на странице post.html)
4. Скриншоты с работающими шаблонами приложены для примера, как должно выглядеть
5. В приложении используются следующие эндпоинты/страницы приложения:
	а) GET "/" - редирект на "/posts"
	б) GET "posts" - список постов на странице ленты постов
		Параметры:
			search - строка с поиском по тегу поста (по умолчанию, пустая строка - все посты)
            		pageSize - максимальное число постов на странице (по умолчанию, 10)
            		pageNumber - номер текущей страницы (по умолчанию, 1)
            	Возвращает:
            		шаблон "posts.html"
            		используется модель для заполнения шаблона:
            			"posts" - List<Post> - список постов (id, title, text, imagePath, likesCount, comments)
            			"search" - строка поиска (по умолчанию, пустая строка - все посты)
            			"paging":
            				"pageNumber" - номер текущей страницы (по умолчанию, 1)
            				"pageSize" - максимальное число постов на странице (по умолчанию, 10)
            				"hasNext" - можно ли пролистнуть вперед
            				"hasPrevious" - можно ли пролистнуть назад
        в) GET "/posts/{id}" - страница с постом
        	Возвращает:
       			шаблон "post.html"
       			используется модель для заполнения шаблона:
       				"post" - модель поста (id, title, text, imagePath, likesCount, comments)
       	г) GET "/posts/add" - страница добавления поста
       		Возвращает:
       			шаблон "add-post.html"
       	д) POST "/posts" - добавление поста
       		Принимает:
       			"multipart/form-data"
       		Параметры:
       			"title" - название поста
       			"text" - текст поста
       			"image" - файл картинки поста (класс MultipartFile)
       			"tags" - список тегов поста (по умолчанию, пустая строка)
       		Возвращает:
       			редирект на созданный "/posts/{id}"
       	е) GET "/images/{id}" -эндпоин, возвращающий набор байт картинки поста
       		Параметры:
       			"id" - идентификатор поста
       	ж) POST "/posts/{id}/like" - увеличение/уменьшение числа лайков поста
       		Параметры:
       			"id" - идентификатор поста
       			"like" - если true, то +1 лайк, если "false", то -1 лайк
       		Возвращает:
       			редирект на "/posts/{id}"
       	з) POST "/posts/{id}/edit" - страница редактирования поста
       		Параметры:
       			"id" - идентификатор поста
       		Возвращает:
       			редирект на форму редактирования поста "add-post.html"
       			используется модель для заполнения шаблона:
       				"post" - модель поста (id, title, text, imagePath, likesCount, comments)
       	и) POST "/posts/{id}" - редактирование поста
       		Принимает:
       			"multipart/form-data"
       		Параметры:
       			"id" - идентификатор поста
       			"title" - название поста
       			"text" - текст поста
       			"image" - файл картинки поста (класс MultipartFile, может быть null - значит, остается прежним)
       			"tags" - список тегов поста (по умолчанию, пустая строка)
       		Возвращает:
       			редирект на отредактированный "/posts/{id}"
       	к) POST "/posts/{id}/comments" - эндпоинт добавления комментария к посту
       		Параметры:
       			"id" - идентификатор поста
       			"text" - текст комментария
       		Возвращает:
       			редирект на "/posts/{id}"
       	л) POST "/posts/{id}/comments/{commentId}" - эндпоинт редактирования комментария
       		Параметры:
       			"id" - идентификатор поста
       			"commentId" - идентификатор комментария
       			"text" - текст комментария
       		Возвращает:
       			редирект на "/posts/{id}"
       	м) POST "/posts/{id}/comments/{commentId}/delete" - эндпоинт удаления комментария
       		Параметры:
       			"id" - идентификатор поста
       			"commentId" - идентификатор комментария
       		Возвращает:
       			редирект на "/posts/{id}"
       	н) POST "/posts/{id}/delete" - эндпоинт удаления поста
       		Параметры:
       			"id" - идентификатор поста
       		Возвращает:
       			редирект на "/posts"
